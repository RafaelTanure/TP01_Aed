Atividade 1: 

Faça um algoritimo em c# utilizando a entrada e saida abaixo , e as restrições e as informações passadas

A loja vai fornecer lajotas do tipo 1: inteiras; do tipo 2, que correspondem à metade das do tipo 1, cortadas ao longo da diagonal; e lajotas do tipo 3, que correspondem à metade do tipo 2. Veja os três tipos de lajotas na figura.
 Está muito claro que sempre serão necessárias 4 lajotas do tipo 3 para os cantos da sala. A tarefa que a diretora passou para os alunos é calcular o número de lajotas dos tipos 1 e 2 que serão necessárias. Na figura, para L=3 e C=5, foram necessárias 23 do tipo 1 e 12 do tipo 2.

Seu programa precisa computar, dados os valores de L e C, a quantidade de lajotas do tipo 1 e do tipo 2 necessárias.


Entrada

A primeira linha da entrada contém um inteiro L indicando a largura da sala. A segunda linha contém um inteiro C representando o comprimento da sala.


Saída

Imprima duas linhas na saída. A primeira deve conter um inteiro, representando o número de lajotas do tipo 1 necessárias. A segunda deve conter um inteiro, indicando o número de lajotas do tipo 2.

1 ≤ L,C ≤ 100

Numeros da entrada: 
3
5


O que deve ser retornado na saida:

23
12

Resposta:

using System;

class Program
{
    static void Main(string[] args)
    {
        int L = int.Parse(Console.ReadLine());
        int C = int.Parse(Console.ReadLine());

        int lajotasTipo1 = L * C + (L - 1) * (C - 1);
        int lajotasTipo2 = (L - 1) * C + L * (C - 1);

        Console.WriteLine(lajotasTipo1);
        Console.WriteLine(lajotasTipo2);
    }
}



Atividade 2:

Faça um algoritimo em c# utilizando a entrada e saida abaixo , e as restrições e as informações passadas.

Uma matriz é chamada simétrica quando, para qualquer elemento da matriz A, a igualdade aij = aji é verdadeira. As matrizes desse tipo são matrizes quadradas, ou seja, o número de linhas é igual ao número de colunas.Faça um programa que ao ser fornecida uma matriz, ele informará se ela é simétrica ou não.

Entrada

Primeira linha conterá o número de linhas (M) e colunas da matriz (N). As linhas posteriores conterão os valores (inteiro) para cada linha da matriz.

Numeros da entrada:

33
2 5 11 
5 4 17
11 17 6


Saída

Seu programa deve imprimir uma linha, contendo o número 1, se a matriz for simétrica, ou 0, caso contrário.

Numeros da saida:

1


Restrições

2 <= M,N <= 100

Resposta:

using System;

class Program
{
    static void Main(string[] args)
    {
        string[] sizes = Console.ReadLine().Split();
        int M = int.Parse(sizes[0]);
        int N = int.Parse(sizes[1]);

        int[,] matriz = new int[M, N];

        for (int i = 0; i < M; i++)
        {
            string[] linha = Console.ReadLine().Split();
            for (int j = 0; j < N; j++)
            {
                matriz[i, j] = int.Parse(linha[j]);
            }
        }

        bool simetrica = VerificarSimetria(matriz, M, N);

        Console.WriteLine(simetrica ? 1 : 0);
    }

    static bool VerificarSimetria(int[,] matriz, int M, int N)
    {
        if (M != N)
            return false;
        for (int i = 0; i < M; i++)
        {
            for (int j = 0; j < i; j++)
            {
                if (matriz[i, j] != matriz[j, i])
                    return false;
            }
        }
        return true;
    }
}

Atividade 3:

Faça um algoritimo em c# utilizando a entrada e saida abaixo , e as restrições e as informações passadas

Descrição:

0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 

           Frente 4 8 
0 0 0 8 7 6 5 4 3 2 1 0 0 0 0 0

           Trás 16 3
0 0 0 8 7 6 5 4 3 2 1 0 0 1 2 3

           Trás 2 12
11 12 0 8 7 6 5 4 3 2 1 0 0 1 2 3

            Frente 8 7 
11 12 0 8 7 6 5 11 9 7 5 3 2 2 2 3

 Além disso, o computador possui a instrução Imprime i, que deve imprimir na saída o valor atual armazenado na posição i da memória.
 Dados N e uma sequência de M instruções, seu programa deve imrpimir, para cada instrução do tipo IMPRIME i, uma linha contendo o valor armazenado na posição de memória i no instante da execução da instrução.

Entrada:

A primeira linha da entrada contém dois inteiros N e M, representando o número de posições de memória e o número de instruções, respectivamente.As M linhas seguintes contêm cada uma, a descrição de uma instrução em uma de três formas possíveis: 1 I V, representando FRENTE I V; 2 I V, representando TRÁS I V; E 3 Irepresentando IMPRIME I.

Saída:

Para cada instrução do tipo IMPRIME i, seu programa deve imprimir uma linha contendo um inteiro representando o valor armazenado na posição de memória i no instante da execução da instrução.

Restrições: 

. 1 ≤ N ≤ 200000;
. 1 ≤ M ≤ 200000;
. 1 ≤ I ≤ N;
. 1 ≤ V ≤ 200000;
. Ao menos uma instrução sera do tipo 3.

Numeros da entrada:

16 7 
1 4 8 
2 16 3
3 14
2 2 12 
1 8 7
3 10
3 14

Números da saída:
1
7
2

Resposta : 

using System;

class Program {
    public static void Main (string[] args) {
      
      string[] posExe = Console.ReadLine().Split(' ');

        int N = int.Parse(posExe[0]);
        int M = int.Parse(posExe[1]);

        if (N > 0 && N <= 200000 && M > 0 && M <= 200000) {
            int[] vetor = new int[N];

            for (int i = 0; i < N; i++) {
                vetor[i] = 0;
            }

            for (int i = 0; i < M; i++) {
                string valores = Console.ReadLine();
                string[] posicao = valores.Split(' ');

              
                int comando = int.Parse(posicao[0]);
                int indice = int.Parse(posicao[1])-1;
                int valor = 0;
              
                if (posicao.Length == 3)
                {
                  valor = int.Parse(posicao[2]);
                }

              


                if (comando == 1) {
                    for (int j = 0; j < valor && (indice+j)<N; j++) {
                        vetor[indice + j] = vetor[indice + j] + Convert.ToInt32(posicao[2]);
                        posicao[2] = Convert.ToString(Convert.ToInt32(posicao[2]) - 1);
                    }
                }
                else if (comando == 2) {
                    for (int j = 0; j < valor  && indice-j>=0; j++) {
                      vetor[indice - j] = vetor[indice - j] + Convert.ToInt32(posicao[2]);
                      posicao[2] = Convert.ToString(Convert.ToInt32(posicao[2]) - 1);
                    }
                }
                else if (comando == 3) {

                   Console.WriteLine(vetor[indice]);

                }
              /*for (int x = 0; x < N; x++) {
                Console.WriteLine(vetor[x]);
              }*/     
            }
        }
    }
}

Atividade 4:

Faça um algoritimo em c# utilizando a entrada e saida abaixo , e as restrições e as informações passadas

Acelerador de partículas

 A universidade está inaugurando um grande acelerador de partículas, com um emissor e três sensores, numerados 1, 2 e 3. Uma partícula, após sair do emissor, entra no acelerador onde pode dar várias voltas sendo acelerada a velocidades muito altas. Num determinado momento, a partícula sai do acelerador por uma das três saídas, atingindo um dos sensores. A figura mostra o caminho por onde as partículas trafegam, com uma graduação de 1 quilômetro. Por exemplo, do emissor até o acelerador são 3 quilômetros e a circunferência do acelerador tem 8 quilômetros.
 Neste problema, será dada a distância total, em quilômetros, percorrida por uma certa partícula trafegando do emissor até algum sensor e seu programa deve determinar qual sensor foi atingido pela partícula. Por exemplo, veja que se a distância total for 23 quilômetros, então a partícula tem que ter atingido o sensor 2.

Entrada

A entrada consiste de uma linha contendo um inteiro E representando a quantidade de experimentos. A seguir teremos E linhas contendo, cada uma um número D, representando a distância total percorrida pela partícula.


Saída

Será composta por uma linha para cada experimento indicando qual foi o sensor atingido 1, 2 ou 3
Restrições

• 6 ≤ D ≤ 800008. D sempre será a distância total percorrida entre o emissor e algum sensor.



Entrada :
3
23
6
9192

Saida:
2
1
3

Resposta: 

using System;

class Program
{
    static void Main(string[] args)
    {
        int E = int.Parse(Console.ReadLine());

        for (int i = 0; i < E; i++)
        {
            int D = int.Parse(Console.ReadLine());
            int sensor = DeterminarSensor(D);
            Console.WriteLine(sensor);
        }
    }
    static int DeterminarSensor(int D)
    {
        int posicao = (D - 1) % 8 + 1;

        if (posicao == 1 || posicao == 7)
            return 2;
        else if (posicao == 2 || posicao == 6)
            return 1;
        else
            return 3;
    }
}



Atividade 5: 
Faça um algoritimo em c# utilizando a entrada e saida abaixo , e as restrições e as informações passadas

Triângulos

 Caio estava brincando de construir triângulos com palitos de diferentes tamanhos.Ele fazia isso juntando as pontas de três palitos sobre uma mesa. Ele notou que podia agrupar os triângulos formados em trÊs grupos:

.Triângulos acutângulos, que são aqueles em que todos os ângulos internos medem menos de 90graus; 

.Triângulos retângulos , que são aqueles que possuem um ângulo interno que mede exatamente 90graus;

.Triângulos obtusângulos, que são aqueles que possuem um ângulo interno que mede mais de 90graus;

Ele também percebeu que nem sempre é possível formar um triângulo com três palitos.

  Sua tarefa é: dados os comprimentos A,B E C de três palitos, dizer se é possivel formar um triângulo com esses palitos e, em caso afirmativo dizer a qual grupo acima o triângulo formado pertence.

Dica:

Hipotenusa elevado ao quadrado, e igual a cateto1 elevado ao quadrado + cateto2 elevado ao quadrado 

Entrada

A entrada consiste de uma linha, contendo um número T que indicará quantos triângulos serão informados.Nas T linhas seguintes serão informados três inteiros A,B e C seárados por espaço representando as medidas dos três palitos

Saida

Imprima uma linha, para cada triangulo, contendo apenas uma letra minúscula:
. "n" se não for possivel formar um triângulo;
. "a" se o triângulo formado for acutângulo;
. "r" se o triângulo formado for retângulo;
. "o" se o triângulo formado for obtusângulo

Restrições

. 1 ≤ A ≤ 10 elevado a 4 
. 1 ≤ B ≤ 10 elevado a 4
. 1 ≤ C ≤ 10 elevado a 4



Entrada: 

2
1 1 1 
1 2 1


Saida:

a
n


Resposta: 

using System;

class Program
{
    static void Main(string[] args)
    {
        int T = int.Parse(Console.ReadLine());

        for (int i = 0; i < T; i++)
        {
            string[] sides = Console.ReadLine().Split(' ');
            int A = int.Parse(sides[0]);
            int B = int.Parse(sides[1]);
            int C = int.Parse(sides[2]);

            if (IsTriangle(A, B, C))
            {
                Console.WriteLine(ClassifyTriangle(A, B, C));
            }
            else
            {
                Console.WriteLine("n");
            }
        }
    }

    static bool IsTriangle(int a, int b, int c)
    {
        return a + b > c && a + c > b && b + c > a;
    }

    static char ClassifyTriangle(int a, int b, int c)
    {
        if (a * a + b * b == c * c || a * a + c * c == b * b || b * b + c * c == a * a)
        {
            return 'r';
        }
        else if (a * a + b * b < c * c || a * a + c * c < b * b || b * b + c * c < a * a)
        {
            return 'o'; 
        }
        else
        {
            return 'a'; 
        }
    }
}
